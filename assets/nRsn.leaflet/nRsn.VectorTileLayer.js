L.VectorTileLayer = L.TileLayer.extend ({    _keyLayers: {},    _clipPathRectangles: {},    initialize: function (url, options, geojsonOptions) {        L.TileLayer.prototype.initialize.call(this, url, options);        this.geojsonLayer = new L.GeoJSON(null, geojsonOptions);    },	    onAdd: function (map) {        this._map = map;        L.TileLayer.prototype.onAdd.call(this, map);        map.addLayer(this.geojsonLayer);    },	    onRemove: function (map) {        map.removeLayer(this.geojsonLayer);        L.TileLayer.prototype.onRemove.call(this, map);    },		_update: function () {        if (this._map && this._map._panTransition && this._map._panTransition._inProgress) { return; }        if (this._tilesToLoad < 0) { this._tilesToLoad = 0; }        L.TileLayer.prototype._update.apply(this, arguments);    },	    _reset: function () {        this.geojsonLayer.clearLayers();        this._keyLayers = {};        this._removeOldClipPaths();        L.TileLayer.prototype._reset.apply(this, arguments);    },		_loadTile: function (tile, tilePoint) {		var that = this;		this._adjustTilePoint(tilePoint);		var tileUrl = this.getTileUrl(tilePoint);		$.getJSON(tileUrl,function(data){that.drawTile (data,tilePoint)});    },	    _removeOldClipPaths: function  () {        for (var clipPathId in this._clipPathRectangles) {            var clipPathZXY = clipPathId.split('_').slice(1);            var zoom = parseInt(clipPathZXY[0], 10);            if (zoom !== this._map.getZoom()) {                var rectangle = this._clipPathRectangles[clipPathId];                this._map.removeLayer(rectangle);                var clipPath = document.getElementById(clipPathId);                if (clipPath !== null) {                    clipPath.parentNode.removeChild(clipPath);                }                delete this._clipPathRectangles[clipPathId];            }        }    },    _recurseLayerUntilPath: function (func, layer) {        if (layer instanceof L.Path) {            func(layer);        }        else if (layer instanceof L.LayerGroup) {            layer.getLayers().forEach(this._recurseLayerUntilPath.bind(this, func), this);        }    },    _clipLayerToTileBoundary: function (layer, tilePoint) {        if (!L.Path.SVG) { return; }        if (!this._map) { return; }        if (!this._map._pathRoot) {            this._map._pathRoot = L.Path.prototype._createElement('svg');            this._map._panes.overlayPane.appendChild(this._map._pathRoot);        }        var svg = this._map._pathRoot;        var defs = null;        if (svg.getElementsByTagName('defs').length === 0) {            defs = document.createElementNS(L.Path.SVG_NS, 'defs');            svg.insertBefore(defs, svg.firstChild);        }        else {            defs = svg.getElementsByTagName('defs')[0];        }        var clipPathId = 'tileClipPath_' + tilePoint.z + '_' + tilePoint.x + '_' + tilePoint.y;        var clipPath = document.getElementById(clipPathId);        if (clipPath === null) {            clipPath = document.createElementNS(L.Path.SVG_NS, 'clipPath');            clipPath.id = clipPathId;   			var tileSize = this.options.tileSize,            nwPoint = tilePoint.multiplyBy(tileSize),            sePoint = nwPoint.add([tileSize, tileSize]),            nw = this._map.unproject(nwPoint),            se = this._map.unproject(sePoint);            this._clipPathRectangles[clipPathId] = new L.Rectangle(new L.LatLngBounds([nw, se]), {                opacity: 0,                fillOpacity: 0,                clickable: false,                noClip: true            });            this._map.addLayer(this._clipPathRectangles[clipPathId]);            var path = document.createElementNS(L.Path.SVG_NS, 'path');            var pathString = this._clipPathRectangles[clipPathId].getPathString();            path.setAttribute('d', pathString);            clipPath.appendChild(path);            defs.appendChild(clipPath);        }        this._recurseLayerUntilPath(function (pathLayer) {            pathLayer._container.setAttribute('clip-path', 'url(#' + clipPathId + ')');        }, layer);    },    drawTile: function (geojson, tilePoint) {        var features = L.Util.isArray(geojson) ? geojson : geojson.features,            i, len, feature;        if (features) {            for (i = 0, len = features.length; i < len; i++) {                feature = features[i];                if (feature.geometries || feature.geometry || feature.features || feature.coordinates) {                    this.drawTile(features[i], tilePoint);                }            }            return this;        }        var options = this.geojsonLayer.options;        if (options.filter && !options.filter(geojson)) { return; }        var parentLayer = this.geojsonLayer;        var incomingLayer = null;        if (this.options.unique && typeof(this.options.unique) === 'function') {            var key = this.options.unique(geojson);            if (!(key in this._keyLayers && geojson.geometry.type !== 'GeometryCollection')) {                geojson.geometry = {                    type: 'GeometryCollection',                    geometries: [geojson.geometry]                };            }    			try {                incomingLayer = L.GeoJSON.geometryToLayer(geojson, options.pointToLayer, options.coordsToLatLng);            }            catch (e) {                return this;            }            incomingLayer.feature = L.GeoJSON.asFeature(geojson);            if (key in this._keyLayers) {                parentLayer = this._keyLayers[key];                parentLayer.feature.geometry.geometries.push(geojson.geometry);            }            else {                this._keyLayers[key] = incomingLayer;            }        }        else {            try {                incomingLayer = L.GeoJSON.geometryToLayer(geojson, options.pointToLayer, options.coordsToLatLng);            }            catch (e) {                return this;            }            incomingLayer.feature = L.GeoJSON.asFeature(geojson);        }        incomingLayer.defaultOptions = incomingLayer.options;        this.geojsonLayer.resetStyle(incomingLayer);        if (options.onEachFeature) {            options.onEachFeature(geojson, incomingLayer);        }        parentLayer.addLayer(incomingLayer);        if (this.options.clipTiles) {            this._clipLayerToTileBoundary(incomingLayer, tilePoint);        }        return this;    }});